#!/usr/bin/env node

const nacl = require('ecma-nacl')
const crypto = require('crypto')
const program = require('commander')

const generateSecret = () => {
  const buffer = new Uint8Array(nacl.box.KEY_LENGTH)
  return new Promise((resolve, reject) => {
    crypto.randomFill(buffer, (err, buf) => {
      if (err) return reject(err)
      resolve(buf)
    })
  })
}
// .toString('Base64')
const run = (args) => {
  if (args.generate) {
    return generateSecret()
      .then(secret => [secret, nacl.box.generate_pubkey(secret)])
      .then(([secret, public]) => [
         Buffer.from(secret.buffer).toString('Base64'),
         Buffer.from(public.buffer).toString('Base64')
      ])
      .then(([secret, public]) => console.log(`Secret key: ${secret} - Public key: ${public}`))
  }
  console.log('No command provided - Exiting!')
}

run(program
  .name('tools')
  .version('1.0.0')
  .option('-g, --generate', 'Generates a public/private keypair')
  .parse(process.argv))
